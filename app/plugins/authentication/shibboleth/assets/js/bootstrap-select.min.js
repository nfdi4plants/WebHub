!function ($) { "use strict"; $.expr[":"].icontains = function (t, e, i) { return 0 <= $(t).text().toUpperCase().indexOf(i[3].toUpperCase()) }; var r = function (t, e, i) { i && (i.stopPropagation(), i.preventDefault()), this.$element = $(t), this.$newElement = null, this.$button = null, this.$menu = null, this.$lis = null, this.options = e, null === this.options.title && (this.options.title = this.$element.attr("title")), this.val = r.prototype.val, this.render = r.prototype.render, this.refresh = r.prototype.refresh, this.setStyle = r.prototype.setStyle, this.selectAll = r.prototype.selectAll, this.deselectAll = r.prototype.deselectAll, this.destroy = r.prototype.remove, this.remove = r.prototype.remove, this.show = r.prototype.show, this.hide = r.prototype.hide, this.init() }; r.VERSION = "1.6.1", r.DEFAULTS = { noneSelectedText: "Nothing selected", noneResultsText: "No results match", countSelectedText: "{0} of {1} selected", maxOptionsText: ["Limit reached ({n} {var} max)", "Group limit reached ({n} {var} max)", ["items", "item"]], multipleSeparator: ", ", style: "btn-default", size: "auto", title: null, selectedTextFormat: "values", width: !1, container: !1, hideDisabled: !1, showSubtext: !1, showIcon: !0, showContent: !0, dropupAuto: !0, header: !1, liveSearch: !1, actionsBox: !1, iconBase: "glyphicon", tickIcon: "glyphicon-ok", maxOptions: !1, mobile: !1 }, r.prototype = { constructor: r, init: function () { var e = this, t = this.$element.attr("id"); this.$element.hide(), this.multiple = this.$element.prop("multiple"), this.autofocus = this.$element.prop("autofocus"), this.$newElement = this.createView(), this.$element.after(this.$newElement), this.$menu = this.$newElement.find("> .dropdown-menu"), this.$button = this.$newElement.find("> button"), this.$searchbox = this.$newElement.find("input"), void 0 !== t && (this.$button.attr("data-id", t), $('label[for="' + t + '"]').click(function (t) { t.preventDefault(), e.$button.focus() })), this.checkDisabled(), this.clickListener(), this.options.liveSearch && this.liveSearchListener(), this.render(), this.liHeight(), this.setStyle(), this.setWidth(), this.options.container && this.selectPosition(), this.$menu.data("this", this), this.$newElement.data("this", this), this.options.mobile && this.mobile() }, createDropdown: function () { var t = this.multiple ? " show-tick" : "", e = this.$element.parent().hasClass("input-group") ? " input-group-btn" : "", i = this.autofocus ? " autofocus" : "", s = this.options.header ? '<div class="popover-title"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + "</div>" : "", n = this.options.liveSearch ? '<div class="bootstrap-select-searchbox"><input type="text" class="input-block-level form-control" autocomplete="off" /></div>' : "", o = this.options.actionsBox ? '<div class="bs-actionsbox"><div class="btn-group btn-block"><button class="actions-btn bs-select-all btn btn-sm btn-default">Select All</button><button class="actions-btn bs-deselect-all btn btn-sm btn-default">Deselect All</button></div></div>' : ""; return $('<div class="btn-group bootstrap-select' + t + e + '"><button type="button" class="btn dropdown-toggle selectpicker" data-toggle="dropdown"' + i + '><span class="filter-option pull-left"></span>&nbsp;<span class="caret"></span></button><div class="dropdown-menu open">' + s + n + o + '<ul class="dropdown-menu inner selectpicker" role="menu"></ul></div></div>') }, createView: function () { var t = this.createDropdown(), e = this.createLi(); return t.find("ul").append(e), t }, reloadLi: function () { this.destroyLi(); var t = this.createLi(); this.$menu.find("ul").append(t) }, destroyLi: function () { this.$menu.find("li").remove() }, createLi: function () { var a = this, l = [], i = "", d = 0; return this.$element.find("option").each(function () { var t = $(this), e = t.attr("class") || "", i = t.attr("style") || "", s = t.data("content") ? t.data("content") : t.html(), n = void 0 !== t.data("subtext") ? '<small class="muted text-muted">' + t.data("subtext") + "</small>" : "", o = void 0 !== t.data("icon") ? '<i class="' + a.options.iconBase + " " + t.data("icon") + '"></i> ' : ""; "" !== o && (t.is(":disabled") || t.parent().is(":disabled")) && (o = "<span>" + o + "</span>"), t.data("content") || (s = o + '<span class="text">' + s + n + "</span>"), a.options.hideDisabled && (t.is(":disabled") || t.parent().is(":disabled")) ? l.push('<a style="min-height: 0; padding: 0"></a>') : t.parent().is("optgroup") && !0 !== t.data("divider") ? 0 === t.index() ? (o = t.parent().attr("label"), n = void 0 !== t.parent().data("subtext") ? '<small class="muted text-muted">' + t.parent().data("subtext") + "</small>" : "", o = (t.parent().data("icon") ? '<i class="' + a.options.iconBase + " " + t.parent().data("icon") + '"></i> ' : "") + '<span class="text">' + o + n + "</span>", d += 1, 0 !== t[0].index ? l.push('<div class="div-contain"><div class="divider"></div></div><dt>' + o + "</dt>" + a.createA(s, "opt " + e, i, d)) : l.push("<dt>" + o + "</dt>" + a.createA(s, "opt " + e, i, d))) : l.push(a.createA(s, "opt " + e, i, d)) : !0 === t.data("divider") ? l.push('<div class="div-contain"><div class="divider"></div></div>') : !0 === $(this).data("hidden") ? l.push("<a></a>") : l.push(a.createA(s, e, i)) }), $.each(l, function (t, e) { i += '<li rel="' + t + '"' + ("<a></a>" === e ? 'class="hide is-hidden"' : "") + ">" + e + "</li>" }), this.multiple || 0 !== this.$element.find("option:selected").length || this.options.title || this.$element.find("option").eq(0).prop("selected", !0).attr("selected", "selected"), $(i) }, createA: function (t, e, i, s) { return '<a tabindex="0" class="' + e + '" style="' + i + '"' + (void 0 !== s ? 'data-optgroup="' + s + '"' : "") + ">" + t + '<i class="' + this.options.iconBase + " " + this.options.tickIcon + ' icon-ok check-mark"></i></a>' }, render: function (t) { var s = this; !1 !== t && this.$element.find("option").each(function (t) { s.setDisabled(t, $(this).is(":disabled") || $(this).parent().is(":disabled")), s.setSelected(t, $(this).is(":selected")) }), this.tabIndex(); var e, i = this.$element.find("option:selected").map(function () { var t = $(this), e = t.data("icon") && s.options.showIcon ? '<i class="' + s.options.iconBase + " " + t.data("icon") + '"></i> ' : "", i = s.options.showSubtext && t.attr("data-subtext") && !s.multiple ? ' <small class="muted text-muted">' + t.data("subtext") + "</small>" : ""; return t.data("content") && s.options.showContent ? t.data("content") : void 0 !== t.attr("title") ? t.attr("title") : e + t.html() + i }).toArray(), n = this.multiple ? i.join(this.options.multipleSeparator) : i[0]; this.multiple && -1 < this.options.selectedTextFormat.indexOf("count") && (e = this.options.selectedTextFormat.split(">"), t = this.options.hideDisabled ? ":not([disabled])" : "", (1 < e.length && i.length > e[1] || 1 == e.length && 2 <= i.length) && (n = this.options.countSelectedText.replace("{0}", i.length).replace("{1}", this.$element.find('option:not([data-divider="true"], [data-hidden="true"])' + t).length))), this.options.title = this.$element.attr("title"), "static" == this.options.selectedTextFormat && (n = this.options.title), n = n || (void 0 !== this.options.title ? this.options.title : this.options.noneSelectedText), this.$button.attr("title", $.trim($("<div/>").html(n).text()).replace(/\s\s+/g, " ")), this.$newElement.find(".filter-option").html(n) }, setStyle: function (t, e) { this.$element.attr("class") && this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|validate\[.*\]/gi, "")); t = t || this.options.style; "add" == e ? this.$button.addClass(t) : "remove" == e ? this.$button.removeClass(t) : (this.$button.removeClass(this.options.style), this.$button.addClass(t)) }, liHeight: function () { var t, e, i, s, n; !1 !== this.options.size && (e = (n = (t = this.$menu.parent().clone().find("> .dropdown-toggle").prop("autofocus", !1).end().appendTo("body")).addClass("open").find("> .dropdown-menu")).find("li > a").outerHeight(), i = this.options.header ? n.find(".popover-title").outerHeight() : 0, s = this.options.liveSearch ? n.find(".bootstrap-select-searchbox").outerHeight() : 0, n = this.options.actionsBox ? n.find(".bs-actionsbox").outerHeight() : 0, t.remove(), this.$newElement.data("liHeight", e).data("headerHeight", i).data("searchHeight", s).data("actionsHeight", n)) }, setSize: function () { function e() { i = o.$newElement.offset().top - v.scrollTop(), s = v.height() - i - d } var i, s, t, n, o = this, a = this.$menu, l = a.find(".inner"), d = this.$newElement.outerHeight(), r = this.$newElement.data("liHeight"), h = this.$newElement.data("headerHeight"), c = this.$newElement.data("searchHeight"), p = this.$newElement.data("actionsHeight"), u = a.find("li .divider").outerHeight(!0), m = parseInt(a.css("padding-top")) + parseInt(a.css("padding-bottom")) + parseInt(a.css("border-top-width")) + parseInt(a.css("border-bottom-width")), f = this.options.hideDisabled ? ":not(.disabled)" : "", v = $(window), b = m + parseInt(a.css("margin-top")) + parseInt(a.css("margin-bottom")) + 2; e(), this.options.header && a.css("padding-top", 0), "auto" == this.options.size ? ((t = function () { null == o.$lis && (o.$lis = a.find("li")); var t = o.$lis.not(".hide"); e(), n = s - b, o.options.dropupAuto && o.$newElement.toggleClass("dropup", s < i && n - b < a.height()), o.$newElement.hasClass("dropup") && (n = i - b), t = 3 < t.length + t.find("dt").length ? 3 * r + b - 2 : 0, a.css({ "max-height": n + "px", overflow: "hidden", "min-height": t + h + c + p + "px" }), l.css({ "max-height": n - h - c - p - m + "px", "overflow-y": "auto", "min-height": Math.max(t - m, 0) + "px" }) })(), this.$searchbox.off("input.getSize propertychange.getSize").on("input.getSize propertychange.getSize", t), $(window).off("resize.getSize").on("resize.getSize", t), $(window).off("scroll.getSize").on("scroll.getSize", t)) : this.options.size && "auto" != this.options.size && a.find("li" + f).length > this.options.size && (f = a.find("li" + f + " > *").not(".div-contain").slice(0, this.options.size).last().parent().index(), f = a.find("li").slice(0, f + 1).find(".div-contain").length, n = r * this.options.size + f * u + m, o.options.dropupAuto && this.$newElement.toggleClass("dropup", s < i && n < a.height()), a.css({ "max-height": n + h + c + p + "px", overflow: "hidden" }), l.css({ "max-height": n - m + "px", "overflow-y": "auto" })) }, setWidth: function () { var t, e, i; "auto" == this.options.width ? (this.$menu.css("min-width", "0"), e = (t = this.$newElement.clone().appendTo("body")).find("> .dropdown-menu").css("width"), i = t.css("width", "auto").find("> button").css("width"), t.remove(), this.$newElement.css("width", Math.max(parseInt(e), parseInt(i)) + "px")) : "fit" == this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", "").addClass("fit-width")) : this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", this.options.width)) : (this.$menu.css("min-width", ""), this.$newElement.css("width", "")), this.$newElement.hasClass("fit-width") && "fit" !== this.options.width && this.$newElement.removeClass("fit-width") }, selectPosition: function () { function t(t) { n.addClass(t.attr("class").replace(/form-control/gi, "")).toggleClass("dropup", t.hasClass("dropup")), e = t.offset(), i = t.hasClass("dropup") ? 0 : t[0].offsetHeight, n.css({ top: e.top + i, left: e.left, width: t[0].offsetWidth, position: "absolute" }) } var e, i, s = this, n = $("<div />"); this.$newElement.on("click", function () { s.isDisabled() || (t($(this)), n.appendTo(s.options.container), n.toggleClass("open", !$(this).hasClass("open")), n.append(s.$menu)) }), $(window).resize(function () { t(s.$newElement) }), $(window).on("scroll", function () { t(s.$newElement) }), $("html").on("click", function (t) { $(t.target).closest(s.$newElement).length < 1 && n.removeClass("open") }) }, setSelected: function (t, e) { null == this.$lis && (this.$lis = this.$menu.find("li")), $(this.$lis[t]).toggleClass("selected", e) }, setDisabled: function (t, e) { null == this.$lis && (this.$lis = this.$menu.find("li")), e ? $(this.$lis[t]).addClass("disabled").find("a").attr("href", "#").attr("tabindex", -1) : $(this.$lis[t]).removeClass("disabled").find("a").removeAttr("href").attr("tabindex", 0) }, isDisabled: function () { return this.$element.is(":disabled") }, checkDisabled: function () { var t = this; this.isDisabled() ? this.$button.addClass("disabled").attr("tabindex", -1) : (this.$button.hasClass("disabled") && this.$button.removeClass("disabled"), -1 == this.$button.attr("tabindex") && (this.$element.data("tabindex") || this.$button.removeAttr("tabindex"))), this.$button.click(function () { return !t.isDisabled() }) }, tabIndex: function () { this.$element.is("[tabindex]") && (this.$element.data("tabindex", this.$element.attr("tabindex")), this.$button.attr("tabindex", this.$element.data("tabindex"))) }, clickListener: function () { var m = this; this.$newElement.on("touchstart.dropdown", ".dropdown-menu", function (t) { t.stopPropagation() }), this.$newElement.on("click", function () { m.setSize(), m.options.liveSearch || m.multiple || setTimeout(function () { m.$menu.find(".selected a").focus() }, 10) }), this.$menu.on("click", "li a", function (t) { var e, i, s, n, o, a, l, d, r, h, c = $(this).parent().index(), p = m.$element.val(), u = m.$element.prop("selectedIndex"); m.multiple && t.stopPropagation(), t.preventDefault(), m.isDisabled() || $(this).parent().hasClass("disabled") || (r = (i = (e = m.$element.find("option")).eq(c)).prop("selected"), h = i.parent("optgroup"), s = m.options.maxOptions, n = h.data("maxOptions") || !1, m.multiple ? (i.prop("selected", !r), m.setSelected(c, !r), $(this).blur(), !1 === s && !1 === n || (o = s < e.filter(":selected").length, a = n < h.find("option:selected").length, d = (l = m.options.maxOptionsText)[0].replace("{n}", s), t = l[1].replace("{n}", n), r = $('<div class="notify"></div>'), (s && o || n && a) && (s && 1 == s ? (e.prop("selected", !1), i.prop("selected", !0), m.$menu.find(".selected").removeClass("selected"), m.setSelected(c, !0)) : n && 1 == n ? (h.find("option:selected").prop("selected", !1), i.prop("selected", !0), h = $(this).data("optgroup"), m.$menu.find(".selected").has('a[data-optgroup="' + h + '"]').removeClass("selected"), m.setSelected(c, !0)) : (l[2] && (d = d.replace("{var}", l[2][1 < s ? 0 : 1]), t = t.replace("{var}", l[2][1 < n ? 0 : 1])), i.prop("selected", !1), m.$menu.append(r), s && o && (r.append($("<div>" + d + "</div>")), m.$element.trigger("maxReached.bs.select")), n && a && (r.append($("<div>" + t + "</div>")), m.$element.trigger("maxReachedGrp.bs.select")), setTimeout(function () { m.setSelected(c, !1) }, 10), r.delay(750).fadeOut(300, function () { $(this).remove() }))))) : (e.prop("selected", !1), i.prop("selected", !0), m.$menu.find(".selected").removeClass("selected"), m.setSelected(c, !0)), m.multiple ? m.options.liveSearch && m.$searchbox.focus() : m.$button.focus(), (p != m.$element.val() && m.multiple || u != m.$element.prop("selectedIndex") && !m.multiple) && m.$element.change()) }), this.$menu.on("click", "li.disabled a, li dt, li .div-contain, .popover-title, .popover-title :not(.close)", function (t) { t.target == this && (t.preventDefault(), t.stopPropagation(), (m.options.liveSearch ? m.$searchbox : m.$button).focus()) }), this.$menu.on("click", ".popover-title .close", function () { m.$button.focus() }), this.$searchbox.on("click", function (t) { t.stopPropagation() }), this.$menu.on("click", ".actions-btn", function (t) { (m.options.liveSearch ? m.$searchbox : m.$button).focus(), t.preventDefault(), t.stopPropagation(), $(this).is(".bs-select-all") ? m.selectAll() : m.deselectAll(), m.$element.change() }), this.$element.change(function () { m.render(!1) }) }, liveSearchListener: function () { var e = this, t = $('<li class="no-results"></li>'); this.$newElement.on("click.dropdown.data-api", function () { e.$menu.find(".active").removeClass("active"), e.$searchbox.val() && (e.$searchbox.val(""), e.$lis.not(".is-hidden").removeClass("hide"), t.parent().length && t.remove()), e.multiple || e.$menu.find(".selected").addClass("active"), setTimeout(function () { e.$searchbox.focus() }, 10) }), this.$searchbox.on("input propertychange", function () { e.$searchbox.val() ? (e.$lis.not(".is-hidden").removeClass("hide").find("a").not(":icontains(" + e.$searchbox.val() + ")").parent().addClass("hide"), e.$menu.find("li").filter(":visible:not(.no-results)").length ? t.parent().length && t.remove() : (t.parent().length && t.remove(), t.html(e.options.noneResultsText + ' "' + e.$searchbox.val() + '"').show(), e.$menu.find("li").last().after(t))) : (e.$lis.not(".is-hidden").removeClass("hide"), t.parent().length && t.remove()), e.$menu.find("li.active").removeClass("active"), e.$menu.find("li").filter(":visible:not(.divider)").eq(0).addClass("active").find("a").focus(), $(this).focus() }), this.$menu.on("mouseenter", "a", function (t) { e.$menu.find(".active").removeClass("active"), $(t.currentTarget).parent().not(".disabled").addClass("active") }), this.$menu.on("mouseleave", "a", function () { e.$menu.find(".active").removeClass("active") }) }, val: function (t) { return void 0 !== t ? (this.$element.val(t), this.$element.change(), this.render(), this.$element) : this.$element.val() }, selectAll: function () { null == this.$lis && (this.$lis = this.$menu.find("li")), this.$element.find("option:enabled").prop("selected", !0), $(this.$lis).not(".disabled").addClass("selected"), this.render(!1) }, deselectAll: function () { null == this.$lis && (this.$lis = this.$menu.find("li")), this.$element.find("option:enabled").prop("selected", !1), $(this.$lis).not(".disabled").removeClass("selected"), this.render(!1) }, keydown: function (t) { var e, i, s, n, o, a, l, d, r, h, c = { 32: " ", 48: "0", 49: "1", 50: "2", 51: "3", 52: "4", 53: "5", 54: "6", 55: "7", 56: "8", 57: "9", 59: ";", 65: "a", 66: "b", 67: "c", 68: "d", 69: "e", 70: "f", 71: "g", 72: "h", 73: "i", 74: "j", 75: "k", 76: "l", 77: "m", 78: "n", 79: "o", 80: "p", 81: "q", 82: "r", 83: "s", 84: "t", 85: "u", 86: "v", 87: "w", 88: "x", 89: "y", 90: "z", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9" }, p = $(this), u = p.parent(); p.is("input") && (u = p.parent().parent()), (l = u.data("this")).options.liveSearch && (u = p.parent().parent()), l.options.container && (u = l.$menu), e = $("[role=menu] li:not(.divider) a", u), !(d = l.$menu.parent().hasClass("open")) && /([0-9]|[A-z])/.test(String.fromCharCode(t.keyCode)) && (l.options.container ? l.$newElement.trigger("click") : (l.setSize(), l.$menu.parent().addClass("open"), d = !0), l.$searchbox.focus()), l.options.liveSearch && (/(^9$|27)/.test(t.keyCode.toString(10)) && d && 0 === l.$menu.find(".active").length && (t.preventDefault(), l.$menu.parent().removeClass("open"), l.$button.focus()), e = $("[role=menu] li:not(.divider):visible", u), p.val() || /(38|40)/.test(t.keyCode.toString(10)) || 0 === e.filter(".active").length && (e = l.$newElement.find("li").filter(":icontains(" + c[t.keyCode] + ")"))), e.length && (/(38|40)/.test(t.keyCode.toString(10)) ? (h = e.index(e.filter(":focus")), s = e.parent(":not(.disabled):visible").first().index(), n = e.parent(":not(.disabled):visible").last().index(), i = e.eq(h).parent().nextAll(":not(.disabled):visible").eq(0).index(), o = e.eq(h).parent().prevAll(":not(.disabled):visible").eq(0).index(), a = e.eq(i).parent().prevAll(":not(.disabled):visible").eq(0).index(), l.options.liveSearch && (e.each(function (t) { $(this).is(":not(.disabled)") && $(this).data("index", t) }), h = e.index(e.filter(".active")), s = e.filter(":not(.disabled):visible").first().data("index"), n = e.filter(":not(.disabled):visible").last().data("index"), i = e.eq(h).nextAll(":not(.disabled):visible").eq(0).data("index"), o = e.eq(h).prevAll(":not(.disabled):visible").eq(0).data("index"), a = e.eq(i).prevAll(":not(.disabled):visible").eq(0).data("index")), u = p.data("prevIndex"), 38 == t.keyCode && (l.options.liveSearch && --h, h != a && o < h && (h = o), h < s && (h = s), h == u && (h = n)), 40 == t.keyCode && (l.options.liveSearch && (h += 1), -1 == h && (h = 0), h != a && h < i && (h = i), n < h && (h = n), h == u && (h = s)), p.data("prevIndex", h), l.options.liveSearch ? (t.preventDefault(), p.is(".dropdown-toggle") || (e.removeClass("active"), e.eq(h).addClass("active").find("a").focus(), p.focus())) : e.eq(h).focus()) : p.is("input") || (r = [], e.each(function () { $(this).parent().is(":not(.disabled)") && $.trim($(this).text().toLowerCase()).substring(0, 1) == c[t.keyCode] && r.push($(this).parent().index()) }), h = $(document).data("keycount"), h++, $(document).data("keycount", h), $.trim($(":focus").text().toLowerCase()).substring(0, 1) != c[t.keyCode] ? (h = 1, $(document).data("keycount", h)) : h >= r.length && ($(document).data("keycount", 0), h > r.length && (h = 1)), e.eq(r[h - 1]).focus()), /(13|32)/.test(t.keyCode.toString(10)) && d && (/(32)/.test(t.keyCode.toString(10)) || t.preventDefault(), l.options.liveSearch ? /(32)/.test(t.keyCode.toString(10)) || (l.$menu.find(".active a").click(), p.focus()) : $(":focus").click(), $(document).data("keycount", 0)), (/(^9$|27)/.test(t.keyCode.toString(10)) && d && (l.multiple || l.options.liveSearch) || /(27)/.test(t.keyCode.toString(10)) && !d) && (l.$menu.parent().removeClass("open"), l.$button.focus())) }, mobile: function () { this.$element.addClass("mobile-device").appendTo(this.$newElement), this.options.container && this.$menu.hide() }, refresh: function () { this.$lis = null, this.reloadLi(), this.render(), this.setWidth(), this.setStyle(), this.checkDisabled(), this.liHeight() }, update: function () { this.reloadLi(), this.setWidth(), this.setStyle(), this.checkDisabled(), this.liHeight() }, hide: function () { this.$newElement.hide() }, show: function () { this.$newElement.show() }, remove: function () { this.$newElement.remove(), this.$element.remove() } }, $.fn.selectpicker = function (o, a) { var l, d = arguments, o = d[0], a = d[1];[].shift.apply(d); var t = this.each(function () { var t = $(this); if (t.is("select")) { var e = t.data("selectpicker"), i = "object" == typeof o && o; if (e) { if (i) for (var s in i) i.hasOwnProperty(s) && (e.options[s] = i[s]) } else { var n = $.extend(r.DEFAULTS, $.fn.selectpicker.defaults || {}, t.data(), i); t.data("selectpicker", e = new r(this, n, a)) } "string" == typeof o && (l = e[o] instanceof Function ? e[o].apply(e, d) : e.options[o]) } }); return void 0 !== l ? l : t }, $.fn.selectpicker.Constructor = r, $(document).data("keycount", 0).on("keydown", ".bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bootstrap-select-searchbox input", r.prototype.keydown).on("focusin.modal", ".bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bootstrap-select-searchbox input", function (t) { t.stopPropagation() }) }(jQuery);